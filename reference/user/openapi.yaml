openapi: 3.0.0
info:
  title: User API
  version: '1.0'
  contact:
    name: Santiago
    email: jsantiagovl@hotmail.com
  description: TiiM User API for Android and iOS apps
servers:
  - url: 'http://localhost:3000'
paths:
  /user:
    post:
      summary: Register new user
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firebaseUserId:
                  type: string
                type:
                  type: string
                  enum:
                    - USER
                    - DRIVER
                    - ADMIN
              required:
                - firebaseUserId
                - type
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
      security:
        - JWT: []
      description: Register in the ser server the new firebase user. If repeated return ok
  '/user/{userID}':
    get:
      summary: Get user data
      responses:
        '200':
          description: OK
      description: Get the user local data plus Firebase pulic profile data
      tags:
        - User
      security:
        - JWT: []
    parameters:
      - schema:
          type: string
        name: userID
        in: path
        required: true
  /routes:
    get:
      summary: Get all routes
      tags:
        - Route
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../common/models/routes.v1.yaml
      description: Get all routes
      security:
        - JWT: []
      parameters:
        - schema:
            type: integer
            default: '1'
          in: query
          name: operationAreaId
  '/routes/{routeID}':
    parameters:
      - type: string
        name: routeID
        in: path
        required: true
    get:
      summary: Get specific route
      tags:
        - Route
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  route:
                    $ref: ../common/models/routes.v1.yaml
                  stops:
                    type: array
                    items:
                      $ref: ../common/models/stop.v1.yaml
                required:
                  - route
                  - stops
      requestBody: {}
      security:
        - JWT: []
  /stops:
    get:
      summary: Get all stops as specified by the optional filters
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../common/models/stop.v1.yaml
      security:
        - JWT: []
      tags:
        - Stop
      parameters:
        - schema:
            type: integer
            default: '1'
          in: query
          name: operationAreaId
        - schema:
            type: integer
          in: query
          name: routeId
        - schema:
            type: string
            enum:
              - ABOARD
              - DESCEND
              - BOTH
          in: query
          name: stopType
        - schema:
            type: string
          in: query
          name: keyword
      description: |-
        Get the stops as specified with the filters.
        The filters have an additive AND behaviour.
        All the filters are optional.
  '/stops/{stopID}':
    parameters:
      - type: string
        name: stopID
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Get specific stop
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../common/models/stop.v1.yaml
      description: ''
      security:
        - JWT: []
      requestBody: {}
      tags:
        - Stop
  /journey/calculate:
    get:
      summary: Get journey data given two stops
      tags:
        - Journey
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  time:
                    type: string
                  price:
                    type: string
                  stops:
                    type: array
                    items:
                      $ref: ../common/models/stop.v1.yaml
                  seatsAvailable:
                    type: number
                  amenities:
                    type: array
                    items:
                      $ref: ../common/models/amenity.v1.yaml
      security:
        - JWT: []
      requestBody: {}
      parameters:
        - schema:
            type: integer
          in: query
          name: runId
          required: true
        - schema:
            type: integer
          in: query
          name: endingStop
          required: true
      description: Calculate a Journey given a Run and a starting Stop.
  '/journey/destinations/{originStopID}':
    get:
      summary: Get all posible destinatios stops given an origin
      tags:
        - Journey
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../common/models/stop.v1.yaml
      security:
        - JWT: []
    parameters:
      - schema:
          type: string
        name: originStopID
        in: path
        required: true
  /journey/origins:
    get:
      summary: Get neraby ascending stops given coordinates (magic algorithm)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../common/models/stop.v1.yaml
      parameters:
        - schema:
            type: string
          in: query
          name: lat
          required: true
        - schema:
            type: string
          in: query
          name: long
          required: true
        - schema:
            type: number
          in: query
          name: radious
      tags:
        - Journey
      description: ''
    parameters: []
  '/runs/bystop/{stopID}':
    get:
      summary: Get runs given an ascendig stop
      tags:
        - Run
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    run:
                      $ref: ../common/models/run.v1.yaml
                    amenities:
                      type: array
                      items:
                        $ref: ../common/models/amenity.v1.yaml
      security:
        - JWT: []
      parameters:
        - schema:
            type: integer
            default: '30'
          in: query
          name: days
          description: 30 days by default
        - schema:
            type: string
          in: query
          name: date
          description: 'Get runs from a specific day. If date is set, days query is discarded'
      description: Return an array of Runs given a ascendig stop.
    parameters:
      - schema:
          type: integer
        name: stopID
        in: path
        required: true
  '/runs/{ID}':
    get:
      summary: Get an specific run
      tags:
        - Run
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../common/models/run.v1.yaml
      security:
        - JWT: []
    parameters:
      - schema:
          type: integer
        name: ID
        in: path
        required: true
  '/runs/{runID}/validateseats':
    parameters:
      - type: string
        name: runID
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Validate seats availability in a specific run
      tags:
        - Run
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: number
            examples: {}
        description: Array of seats number
  /reservations:
    post:
      summary: Create a new reservation
      tags:
        - Reservation
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ../common/models/reservation.v1.yaml
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
      security:
        - JWT: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                runId:
                  type: number
                endStopId:
                  type: number
                seats:
                  type: array
                  items:
                    type: number
      description: Create a new reservation for the client.
    parameters: []
    get:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../common/models/reservation.v1.yaml
      description: Return the client reservations.
  '/reservations/{ID}':
    parameters:
      - type: string
        name: ID
        in: path
        required: true
    get:
      summary: Get reservation
      tags:
        - Reservation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../common/models/reservation.v1.yaml
      requestBody: {}
      security:
        - JWT: []
  '/reservations/{ID}/cancel':
    get:
      summary: Cancel a reservation
      tags:
        - Reservation
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                type: boolean
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
      requestBody: {}
      security:
        - JWT: []
    parameters:
      - schema:
          type: string
        name: ID
        in: path
        required: true
  /journey/trajectory:
    get:
      summary: Get the time and price of a trajectory
      tags:
        - Trajectory
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../common/models/trajectory.v1.yaml
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                originStopId:
                  type: integer
                destinationStopId:
                  type: integer
      description: |-
        Get the time and price of a trajectory given a starting stop and a final stop from the same route.
        The returning element is an on object.
        In case of unexistent stop or if the stops don't belong to the same route and an error will be returned.
components:
  schemas: {}
  securitySchemes:
    JWT:
      type: http
      scheme: Bearer
