openapi: 3.0.0
info:
  title: Dashboard
  version: '1.0'
servers:
  - url: 'http://localhost:3000/api/v1/dashboard'
    description: Localhost
  - url: 'http://api.gotiim.com/api/v1/dashboard'
    description: Production
paths:
  /operation-areas:
    post:
      summary: Create a new operation area
      tags:
        - OperationArea
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ../common/models/operation-area.v1.yaml
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../common/models/operation-area.v1.yaml
      description: |
        Create a new operation area

        Responses:
         * 201 Created. Return the created driver.
         * 500 ERROR. Something went wrong.

        Operation:

          1. Clear the id from the request body if any.
          2. Validate that the new area is unique.
          3. Insert to DB.
          4. Return the created object.

        Notes: NA
      security:
        - JWT: []
    get:
      summary: Get list of all operation areas
      tags:
        - OperationArea
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../common/models/operation-area.v1.yaml
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
      requestBody:
        description: ''
      security:
        - JWT: []
      description: "Get list of all operation areas\n\nResponses:\n  * 200 OK.\n  * 500 ERROR. \n\nOperation:\n\n  1. Get and return all the operation areas.\n\nNotes: \n\n* NA\n"
    parameters: []
  '/operation-areas/{areaId}':
    parameters:
      - type: string
        name: areaId
        in: path
        required: true
    get:
      summary: Get a specific operation area
      tags:
        - OperationArea
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../common/models/operation-area.v1.yaml
      security:
        - JWT: []
      description: "Get a specific operation area\n\nResponses:\n * 200 OK. Return the list of buses.\n * 404 Not Found. The requested ID dosn't exists.\n * 500 ERROR. Something went wrong.\n\nOperation:\n\n  1. Try to get the requested ID from operation areas. If not coincidendes, response 404.\n  2. Return the requested data\n\nNotes: \n\n* NA"
    patch:
      summary: Update operation area data
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: ../common/models/operation-area.v1.yaml
      security:
        - JWT: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../common/models/operation-area.v1.yaml
      description: |-
        Update the operation area data

        RESPONSES:
         * 202 Accepted. Return the modifieded operation area
         * 404 Not found. Resource not found
         * 500 ERROR. Something went wrong.

        OPERATION:

        1. Find the operation area by pk. If not found return 404.
        2. Clear the id field if any.
        3. Validate that all the fields from the body belongs to the model.
        4. Update the values and save.
        5. Return the updated model.

        NOTES:

        NA
  '/routes/{routeId}':
    parameters:
      - type: string
        name: routeId
        in: path
        required: true
    get:
      summary: Get a specific route with full data
      tags:
        - Route
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../common/models/routes.v1.yaml
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
      security:
        - JWT: []
      description: |-
        Get a specific route

        RESPONSES:

         * 200 OK. Return the specific Route.
         * 404 Not Found. The requested resource dosn't exists.
         * 500 ERROR. Something went wrong.

        OPERATION:

        1. Find Route by pk
        2. Return the full route, include stops and trajectories

        NOTES:

        NA
    patch:
      summary: Update route core data
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: ../common/models/routes.v1.yaml
      security:
        - JWT: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../common/models/routes.v1.yaml
      description: |-
        Update Route model data

        RESPONSES:
         * 202 Accepted. Return the updated model.
         * 404 Not Found. The referenced object coudn't be found.
         * 500 ERROR. Something went wrong.

        OPERATION:

        1. Find the Route by pk.
        2. Clear the id field from body data, if any.
        3. Validate that all the fields from the body belongs to the model.
        4. Update the values and save.

        NOTES:

        * Is not expected to recive stops & trajectories in the body.
      operationId: Update route core data
  '/stops/{stopId}':
    parameters:
      - type: string
        name: stopId
        in: path
        required: true
    get:
      summary: Get a specific stop
      tags:
        - Stop
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../common/models/stop.v1.yaml
      security:
        - JWT: []
      requestBody: {}
      description: |
        Get a specific stop.

        RESPONSES:
         * 200 OK. Return the specifc Stop.
         * 404 Not Found. The requested ID dosn't exists.
         * 500 ERROR. Something went wrong.

        OPERATION:

        1. Find Stop by pk.
        2. Return the Stop model.

        NOTES:

        NA
      operationId: 'get-stops-{stopID}'
    patch:
      summary: Update the specific stop
      tags:
        - Stop
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: ../common/models/stop.v1.yaml
      security:
        - JWT: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../common/models/stop.v1.yaml
      description: |-
        Update the specific stop

        RESPONSES:
         * 202 Accepted. Return the updated Stop model.
         * 404 Not Found. The referenced object coudn't be found.
         * 500 ERROR. Something went wrong.

        OPERATION:

        1. Find the Stop by pk. Else, return 404.
        2. Verify that the id field from body data is the same as the path; else use the same as the path.
        3. Validate that all the fields from the body belongs to the model.
        4. Save the model and return the saved model.

        NOTES:

        !! Edit the seatsMask or seatNumeration fileds could cause unexpected errors on reservations and runs.
      operationId: 'patch-stops-{stopID}'
    delete:
      summary: Delete the specific stop
      tags:
        - Stop
      responses:
        '202':
          description: Accepted
      security:
        - JWT: []
  /vehicles:
    get:
      summary: Get the list of all vehicles models
      tags:
        - Vehicle
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../common/models/vehicle-model.v1.yaml
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
            application/xml:
              schema:
                type: object
                properties: {}
      operationId: get-vehicle
      security:
        - JWT: []
      description: "Get the list of all vehicles models\n\nRESPONSES:\n * 200 OK. Return the list of all vehicles\n * 500 ERROR. Something went wrong\n\nOPERATION:\n\n1. Retrive all the vehicles from the list\n\nNOTES: \n\nNA"
    post:
      summary: Create a new vehicle
      tags:
        - Vehicle
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ../common/models/vehicle-model.v1.yaml
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
      operationId: post-vehicle
      description: "Insert a new vehicle in DB\n\nRESPONSES:\n * 201 CREATED. Return the created vehicle model.\n * 500 ERROR. Something went wrong\n\nOPERATION:\n\n1. Insert the new vehicle entity.\n2. Asociate the selected amenities to the new vehicle.\n3. Return the vehicle object.\n\nNOTES:\n\n * The ammenities need to be craeted first in order to select and asociate. \n * The models are global, independent from the operation area."
      security:
        - JWT: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../common/models/vehicle-model.v1.yaml
    parameters: []
  '/vehicles/{vehicleID}':
    parameters:
      - type: string
        name: vehicleID
        in: path
        required: true
    patch:
      summary: Update vehicle model data
      tags:
        - Vehicle
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: ../common/models/vehicle-model.v1.yaml
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
      operationId: 'patch-vehicle-{vehicleID}'
      description: |-
        Update vehicle model data

        RESPONSES:
         * 202 Accepted. Return the updated vehicle model.
         * 404 Not Found. The referenced object coudn't be found.
         * 500 ERROR. Something went wrong.

        OPERATION:

        1. Find the vehicle model by pk. Else, return 404.
        2. Verify that the id field from body data is the same as the path; else use the same as the path.
        3. Validate that all the fields from the body belongs to the model.
        4. Save the model and return the saved model.

        NOTES:

        !! Edit the seatsMask or seatNumeration fileds could cause unexpected errors on reservations and runs.
      security:
        - JWT: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../common/models/vehicle-model.v1.yaml
    get:
      summary: Get the specific vehicle
      operationId: 'get-vehicle-{vehicleID}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../common/models/vehicle-model.v1.yaml
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
      description: |-
        Get the specific vehicle

        RESPONSES:
         * 200 OK. Return the vehicle.
         * 404 Not Found. The requested ID dosn't exists.
         * 500 ERROR. Something went wrong.

        OPERATION:

        1. Find vehicle by pk
        2. Return the vehicle model

        NOTES:

        * The operationAreaId filter dosn't apply here. Vehicles are a shared entity betwen all operation areas.
  /buses:
    post:
      summary: Create a new bus
      tags:
        - Bus
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ../common/models/bus.v1.yaml
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
      operationId: post-buses
      description: |-
        Create a new bus

        RESPONSES:
         * 201 Created. Return the created bus.
         * 500 ERROR. Something went wrong.

        OPERATION:

        1. Get the current operation area from the user data.
        2. Validate if the bus operationarea is the same as the user who made the request. If the user is superadmin, don't make the prev validation.
        3. Save the bus.
        4. Return the created object.

        NOTES:

        * The operation area validation could be ignored for now. Use the one from the body request.
      security:
        - JWT: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../common/models/bus.v1.yaml
    get:
      summary: Get the list of buses
      tags:
        - Bus
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../common/models/bus.v1.yaml
        '204':
          description: No Content
          content:
            application/json:
              schema:
                type: array
                items: {}
              examples:
                example-1:
                  value: []
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
      operationId: get-buses
      description: |-
        Get the list of buses

        RESPONSES:
         * 200 OK. Return the list of buses.
         * 204 No content. If the query returns empty.
         * 500 ERROR. Something went wrong.

        OPERATION:

        1. Find all buses
        2. If the operationArea param is set, filter by area.
        3. Return the list of buses. If empty return 204 and an empty array.

        NOTES:

        NA
      security:
        - JWT: []
      requestBody:
        description: ''
      parameters:
        - schema:
            type: integer
          in: query
          name: operationAreaId
          description: Filter by operation area
  '/buses/{busID}':
    parameters:
      - type: string
        name: busID
        in: path
        required: true
        schema:
          type: integer
    patch:
      summary: Upadte the bus data
      tags:
        - Bus
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: ../common/models/bus.v1.yaml
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
      operationId: 'patch-buses-{busID}'
      description: |-
        Upadte the bus data

        RESPONSES:
         * 202 Accepted. Return the updated bus.
         * 404 Not found. Resource not found
         * 500 ERROR. Something went wrong.

        OPERATION:

        1. Find the bus by pk. If not found return 404.
        2. Clear the id field and operationArea from body data, if any.
        3. Validate that all the fields from the body belongs to the model.
        4. Update the values and save.
        5. Return the upadted model.

        NOTES:

        NA
      security:
        - JWT: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../common/models/bus.v1.yaml
        description: Any value from the object is suficcient. Except id.
    delete:
      summary: Delete the bus and cancel the asociated resv
      tags:
        - Bus
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
                    description: DELETED
      operationId: 'delete-buses-{busID}'
      description: |-
        Delete the bus and cancel all the asociated reservations.

        RESPONSES:
         * 202 Accepted. Successfully deleted bus.
         * 404 Not found. Resource not found
         * 500 ERROR. Something went wrong.

        OPERATION:

        * SuperAdmin only
        1. Find the bus by pk. If not found return 404.
        2. Find all the runs asociated to the bus.
        3. Find all the reservations asociated to previous runs.
        4. Cancel all the previous reservations.
        5. Delete the bus.
        6. Return { "response": "DELETED" }.


        NOTES:

        * This action is a super admin only
      security:
        - JWT: []
    get:
      summary: Get the specific bus
      operationId: 'get-buses-{busID}'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../common/models/bus.v1.yaml
      description: |-
        Get the specific bus.

        RESPONSES:
         * 200 Ok. Return the bus.
         * 404 Not found. Resource not found
         * 500 ERROR. Something went wrong.

        OPERATION:

        1. Find the bus by pk. If not found return 404.
        5. Return the bus.

        NOTES:

        NA
      security:
        - JWT: []
  /drivers:
    get:
      summary: Get a list of drivers
      tags:
        - Drivers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../common/models/driver.v1.yaml
        '204':
          description: No Content
          content:
            application/json:
              schema:
                type: array
                items: {}
              examples:
                example:
                  value: []
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: ../common/models/driver.v1.yaml
      operationId: get-drivers
      description: |-
        Get a list of drivers

        RESPONSES:
         * 200 OK. Return the list of drivers.
         * 204 No content. If the query returns empty.
         * 500 ERROR. Something went wrong.

        OPERATION:

        1. Fin all drivers
        2. If the operationArea param is set filter by area.
        3. Return the list of drivers. If empty return 204 and an empty array.

        NOTES:

        NA
      security:
        - JWT: []
      requestBody: {}
      parameters:
        - schema:
            type: integer
          in: query
          name: operationAreaId
    post:
      summary: Create a driver
      tags:
        - Drivers
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ../common/models/driver.v1.yaml
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
      operationId: post-drivers
      description: |
        Create a driver

        RESPONSES:
         * 201 Created. Return the created driver.
         * 500 ERROR. Something went wrong.

        OPERATION:

        1. Get the current operation area from the user data.
        2. Validate if the driver operation area is the same as the user who made the request. If the user is superadmin, don't make the prev validation.
        3. Create the user inisde Firebase.
        5. Add the user type in the extended table of the user. tipo : CONDUCTOR.
        6. Return the created object.

        NOTES:

        * The operation area validation could be ignored for now. Use the one from the body request.
        * The firebase user is the same for userId inside the sql db.
      security:
        - JWT: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../common/models/driver.v1.yaml
  '/drivers/{driverID}':
    parameters:
      - type: string
        name: driverID
        in: path
        required: true
    patch:
      summary: Update the driver data
      tags: []
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: ../common/models/driver.v1.yaml
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
      operationId: 'patch-driver-{driverID}'
      description: |-
        Update the driver data

        RESPONSES:
         * 202 Accepted. Return the updated driver.
         * 404 Not found. Resource not found
         * 500 ERROR. Something went wrong.

        OPERATION:

        1. Find the driver by pk. If not found return 404.
        2. Clear the id field and operationArea from body data, if any.
        3. Validate that all the fields from the body belongs to the model.
        4. Update the values and save.
        5. Return the updated model.

        NOTES:

        NA
      security:
        - JWT: []
      parameters:
        - schema:
            type: integer
          in: query
          name: operationAreaId
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../common/models/driver.v1.yaml
        description: Any value from the object is suficcient. Except id.
    delete:
      summary: Delte a driver
      tags: []
      responses: {}
      operationId: 'delete-driver-{driverID}'
      description: |-
        Delte a driver

        RESPONSES:
         * 202 Accepted. Successfully deleted driver.
         * 404 Not found. Resource not found
         * 500 ERROR. Something went wrong.

        OPERATION:

        * SuperAdmin only
        1. Find the driver by pk. If not found return 404.
        2. Find all the runs asociated to the driver.
        3. Find all the reservations asociated to previous runs.
        4. Cancel all the previous reservations.
        5. Delete the driver.
        6. Return { "response": "DELETED" }.


        NOTES:

        * This action is a super admin only
    get:
      summary: Get the specific driver.
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../common/models/driver.v1.yaml
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
      operationId: 'get-driver-{driverID}'
      description: |-
        Get the specific driver.

        RESPONSES:
         * 200 Ok. Return the driver.
         * 404 Not found. Resource not found
         * 500 ERROR. Something went wrong.

        OPERATION:

        1. Find the driver by pk. If not found return 404.
        5. Return the driver.

        NOTES:

        NA
      security:
        - JWT: []
      requestBody: {}
  /routes/:
    get:
      summary: Get a list of routes
      tags:
        - Route
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../common/models/routes.v1.yaml
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
      operationId: get-routes
      description: "Get a list of routes\n\nRESPONSES:\n * 200 OK. Return a list of routes\n * 500 ERROR. Something went wrong\n\nOPERATION:\n\n1. Retrive all the routes.\n2. If the operationAreaId filter is set, filter by the operation area.\n3. Return the list of routes.\n\nNOTES: \n\n * The returned routes has only primary data, no stops array, no trajectories array."
      security:
        - JWT: []
      parameters:
        - schema:
            type: integer
            default: '1'
          in: query
          name: operationAreaId
          description: ''
    post:
      summary: Create a new route
      tags:
        - Route
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ../common/models/routes.v1.yaml
      operationId: post-routes
      description: |-
        Create a new route.

        RESPONSES:
         * 201 CREATED. Return the created route.
         * 500 ERROR. Something went wrong

        OPERATION:

        1. Verify that the operationAreaId exists.
        2. Delete the id field if set.
        3. Before save, set the route status as: INACTIVE
        4. Return the created route.


        NOTES:

         * The new route is always set to be INACTIVE. It need to be manually activated once the stops an trajectories are ready.
         * Is not expected to recive stops & trajectories in the body.
  /stop:
    get:
      summary: Get a list of Stops
      tags:
        - Stop
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../common/models/stop.v1.yaml
        '500':
          description: Internal Server Error
      operationId: get-stop
      description: "Get a list of Stops\n\nRESPONSES:\n * 200 OK. Return a list of Stops\n * 500 ERROR. Something went wrong\n\nOPERATION:\n\n1. Retrive all the Stops.\n2. If the routeId or operationAreaId filter is set, filter by the specific. If both filters are set filter by routeId only.\n\n3. Return the list of Stops.\n\nNOTES: \n\nNA"
      security:
        - JWT: []
      requestBody: {}
      parameters:
        - schema:
            type: integer
          in: query
          name: operationAreaId
        - schema:
            type: integer
          in: query
          name: routeId
    post:
      summary: Create a new Stop
      tags:
        - Stop
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ../common/models/stop.v1.yaml
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
      operationId: post-stop
      description: |-
        Create a new Stop.

        RESPONSES:
         * 201 CREATED. Return the created Stop.
         * 500 ERROR. Something went wrong

        OPERATION:

        1. Verify that the operationAreaId exists.
        2. Delete the id field if set.
        3. Set the nextStopId to be null.
        4. If prevStopId param is set and the prev stop exist in the same route, make an Insert after stop operation.
        5. Save the route.
        6. If the new stop is the last in the route, update the previous ending stop to point to the new stop.
        7. Return the created stop.

        NOTES:

         * The new Stop is always set to be ACTIVE.
         * The prevStopId param is optional
      security:
        - JWT: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../common/models/stop.v1.yaml
      parameters:
        - schema:
            type: integer
            default: '0'
          in: query
          name: prevStopId
  '/stops/{stopId}/set-status':
    parameters:
      - type: string
        name: stopId
        in: path
        required: true
    patch:
      summary: Activate or deactivate the stop
      tags:
        - Stop
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
                    description: ok
              examples:
                example:
                  value:
                    response: ok
      operationId: patch-stops-stopId-active
      description: |
        Activate or deactivate the stop.


        RESPONSES:
         * 202 Accepted. Return the updated Stop model.
         * 404 Not Found. The referenced object coudn't be found.
         * 500 ERROR. Something went wrong.

        OPERATION:

        1. Find the Stop by pk. Else, return 404.
        2. If the stop status is diferent from the one in the body, continue, else return.
        3. Make the change status operation.
        4. Return {"response" : "ok"}

        NOTES:

        !! Edit the seatsMask or seatNumeration fileds could cause unexpected errors on reservations and runs.
      security:
        - JWT: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                isActive:
                  type: boolean
              required:
                - isActive
components:
  schemas: {}
  securitySchemes:
    JWT:
      name: Bearer
      type: apiKey
      in: header
