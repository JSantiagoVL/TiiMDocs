openapi: 3.0.0
info:
  title: driver.v1
  version: '1.0'
servers:
  - url: 'http://localhost:3000/api/v1/driver'
    description: localhost
  - description: production
    url: 'https://api.gotiim.com/api/v1/driver'
paths:
  /runs:
    get:
      summary: Get the runs that driver has
      tags:
        - Runs
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    routeName:
                      type: string
                    run:
                      $ref: ../common/models/run.v1.yaml
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
        '':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../common/models/run.v1.yaml
      operationId: get-runs
      description: |-
        Get the runs that driver has.

        RESPONSES:

        * 200
        * 500

        OPERATION:

        1. Get all the runs filtered by the driverId = user who made de user.
        2. Filter where departureDate(Day) = Today.
        3. The filter by status = OPEN || CLOSED || IN_JOURNEY.
        4. Return the runs.

        NOTES:

         NA
      security:
        - JWT: []
  '/reservations-by-run/{runID}':
    parameters:
      - type: string
        name: runID
        in: path
        required: true
    get:
      summary: Get the run in detail.
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../common/models/reservation.v1.yaml
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
      operationId: get-runs-runID
      description: "Get the run in detail.\n\nRESPONSES:\n\n* 200. OK \n* 404. Not found\n* 500. Error\n\nOPERATION:\n\n1. Get the run by pk. Else 404\n2. Get the list of associated reservations by the runId.\n3. Return the list of reservations.\n\nNOTES:\n\n NA"
      security:
        - JWT: []
  '/runs/{runID}/lets-go':
    parameters:
      - type: string
        name: runID
        in: path
        required: true
    patch:
      summary: Upadate aboard reservations list
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../common/models/reservation.v1.yaml
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
      operationId: patch-runs-runID-lets-go
      description: |-
        Upadate aboard reservations list.

        RESPONSES:

        * 200. Ok
        * 404. Not found: the runID dosn't exist
        * 406. Not acceptable: If some validation fail
        * 500. ERROR. Something went wrong.

        OPERATION:

        1. Find the run by pk. Else 404.
        2. Validate that the run status is: OPEN| CLOSED | COMPLETED | IN_JOURNEY. Else return 406 Not acceptable.
        3. IF the current status is OPEN | CLOSED : Set Run status to IN_JOURNEY.
        4. For each reservation on the request, ignore all fields except status and id.
        5. Validate that each reservation belong to the runId on the path. Else ignore the reservation.
        6. Validate the status of the reservation is one of the next: IN_PROGRESS | ENDED | ABSENT. Else ignore the reservations.
        7. Update the reservation (save)
        8. END FOREACH. Return the updated list of reservations.

        NOTES:

         NA
      security:
        - JWT: []
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: ../common/models/reservation.v1.yaml
  '/stops-by-route/{routeID}':
    parameters:
      - type: string
        name: routeID
        in: path
        required: true
    get:
      summary: Get the list of active stops that belong to a route
      tags:
        - Stops
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../common/models/stop.v1.yaml
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
      operationId: get-stops-by-route-routeID
      description: |-
        Get the list of active stops that belong to a route.

        RESPONSES:

        * 200
        * 404
        * 500

        OPERATION:

        1. Get the active stops of the route.


        NOTES:

         NA
      security:
        - JWT: []
  '/runs/{runID}/end':
    parameters:
      - type: string
        name: runID
        in: path
        required: true
    patch:
      summary: End the current journey
      tags: []
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: ../common/models/run.v1.yaml
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
      operationId: patch-runs-runID-end
      description: |-
        End the current journey.

        RESPONSES:

        * 202. Accepted
        * 404. Not found: the runID dosnt exist
        * 406. Not acceptable: If some validation fail
        * 500. ERROR. Something went wrong.

        OPERATION:

        1. Get the run by pk. Else return 404.
        2. Validate that the run status is in IN_JOURNEY. Else return 406.
        3. Validate that the driver who made the request is the same on the run.
        4. Change run staus to: ENDED
        5. Return the updated run.

        NOTES:

         NA
      security:
        - JWT: []
      requestBody: {}
  '/run-tracking/{runId}':
    parameters:
      - type: string
        name: runId
        in: path
        required: true
    patch:
      summary: Update the position of a vehicle
      tags: []
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
              examples:
                example:
                  value:
                    response: ok
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
      operationId: patch-tracking-runId
      description: |-
        Update the position of a vehicle

        RESPONSES:

        * 202. Accepted
        * 406. Not acceptable
        * 500. Error

        OPERATION:

        1. Get the run by pk. Else return 404
        2. IF the run is on status IN_JOURNEY AND driverId = driver who made the request, then update the position. ELSE: Return 406 not acceptable.
        3. Return 202 {response: ok}


        NOTES:

         NA
      security:
        - JWT: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                lat:
                  type: number
                long:
                  type: number
  '/run-sos/{runId}':
    parameters:
      - type: string
        name: runId
        in: path
        required: true
    post:
      summary: Craee a new SOS alert to the operator.
      tags:
        - SOS
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ../common/models/sos-alert.v1.yaml
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: ../common/models/sos-alert.v1.yaml
        '500':
          description: Internal Server Error
      operationId: post-run-sos-runId
      description: |-
        Send a new SOS alert to the operator.

        RESPONSES:

        * 201. Created.
        * 406. Not acceptable.
        * 500. Error.

        OPERATION:

        1. Get the run by runId inside the body. Else return 404
        2. Clear the id and status fiels from the body.
        3. Set the status to OPEN.
        4. Add to log: "[TimeStamp] New alert from driver: [driverName]"
        5. IF the run is on status IN_JOURNEY AND driverId = driver who made the request, THEN save. ELSE: Return 406 not acceptable.
        6. Return the created alert.

        NOTES:

         The description field is set for a future implementation.
      security:
        - JWT: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../common/models/sos-alert.v1.yaml
components:
  schemas: {}
  securitySchemes:
    JWT:
      type: http
      scheme: Bearer
