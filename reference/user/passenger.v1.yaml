openapi: 3.0.0
info:
  title: User API
  version: '1.0'
  contact:
    name: Santiago
    email: jsantiagovl@hotmail.com
  description: TiiM User API for Android and iOS apps
servers:
  - url: 'http://localhost:3000/api/v1/passenger'
    description: Localhost
  - description: Produccion
    url: 'http://api.gotiim.com/api/v1/passenger'
paths:
  /routes:
    get:
      summary: Get all routes
      tags:
        - Route
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../common/models/routes.v1.yaml
      description: Get all routes
      security:
        - JWT: []
      parameters:
        - schema:
            type: integer
            default: '1'
          in: query
          name: operationAreaId
  '/routes/{routeID}':
    parameters:
      - type: string
        name: routeID
        in: path
        required: true
    get:
      summary: Get specific route
      tags:
        - Route
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  route:
                    $ref: ../common/models/routes.v1.yaml
                required:
                  - route
      requestBody: {}
      security:
        - JWT: []
  /stops:
    get:
      summary: Get all stops as specified by the optional filters
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../common/models/stop.v1.yaml
      security:
        - JWT: []
      tags:
        - Stop
      parameters:
        - schema:
            type: integer
            default: '1'
          in: query
          name: operationAreaId
        - schema:
            type: integer
          in: query
          name: routeId
        - schema:
            type: string
            enum:
              - ABOARD
              - DESCEND
              - BOTH
          in: query
          name: stopType
        - schema:
            type: string
          in: query
          name: keyword
      description: "Functionallity:\n* Get the stops as specified with the filters.\n* The filters have an additive AND behaviour.\n* All the filters are optional.\n* Filter by stopType, possible values: ABOARD, DESCEND, BOTH. \nIf ABOARD is selected then system will search by ABOARD type and BOTH type, in order to return all posible aboard stops. Same for descend."
  '/stops/{stopID}':
    parameters:
      - type: string
        name: stopID
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Get specific stop
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../common/models/stop.v1.yaml
      description: ''
      security:
        - JWT: []
      requestBody: {}
      tags:
        - Stop
  '/journey/destinations/{originStopID}':
    get:
      summary: Get all possible destinations stops given an origin
      tags:
        - Journey
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../common/models/stop.v1.yaml
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
      security:
        - JWT: []
      description: |-
        Get all posible destinations stops given an origin.

        The same origin stop could live in other routes, therfore we need all the other stops that live in other routes an then get all the destinations.

        Operation:

        * Get the stops that have the same coordinates that the originStop and are of type ABOARD
        * For each stop obtain the next stops in the route, the stops need to be of type DESCEND or BOTH.
    parameters:
      - schema:
          type: string
        name: originStopID
        in: path
        required: true
  /journey/origins:
    get:
      summary: Get neraby ascending stops given coordinates (magic algorithm)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../common/models/stop.v1.yaml
      parameters:
        - schema:
            type: string
          in: query
          name: lat
          required: true
        - schema:
            type: string
          in: query
          name: long
          required: true
        - schema:
            type: integer
          in: query
          name: maxradius
        - schema:
            type: integer
          in: query
          name: maxresults
        - schema:
            type: string
            enum:
              - ABOARD
              - DESCEND
              - BOTH
          in: query
          name: stoptype
      tags:
        - Journey
      description: ''
    parameters: []
  '/runs/by-stop/{stopID}':
    get:
      summary: Get runs given an ascendig stop
      tags:
        - Run
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    run:
                      $ref: ../common/models/run.v1.yaml
                    amenities:
                      type: array
                      items:
                        $ref: ../common/models/amenity.v1.yaml
      security:
        - JWT: []
      parameters:
        - schema:
            type: integer
            default: '30'
          in: query
          name: days
          description: 30 days by default
        - schema:
            type: string
          in: query
          name: date
          description: 'Get runs from a specific day. If date is set, days query is discarded'
      description: |+
        Return an array of Runs given an ascendig stop.

        Operation:

        1. Validate that the stop exists and is ACTIVE
        2. Search for all runs with OPEN status
        3. Then additionally search for runs which departureDate >= currentDate+3min.
        4. If date filter is set, then additionally search for runs which departureDate <= query.date at 23:59 hrs
        5. If days are set calculate the days betwen that range.



    parameters:
      - schema:
          type: integer
        name: stopID
        in: path
        required: true
  '/runs/{ID}':
    get:
      summary: Get an specific run
      tags:
        - Run
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../common/models/run.v1.yaml
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
      security:
        - JWT: []
    parameters:
      - schema:
          type: integer
        name: ID
        in: path
        required: true
  '/runs/{runID}/reserve-seats':
    parameters:
      - schema:
          type: string
        name: runID
        in: path
        required: true
    patch:
      summary: Reserve seats and verfy availability
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  reservedSeats:
                    type: array
                    items:
                      type: integer
                  unavailableSeats:
                    type: array
                    items:
                      type: integer
              examples:
                example:
                  value:
                    reservedSeats:
                      - 6
                    liberatedSeats:
                      - 7
                    unavailableSeats: []
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
        '428':
          description: Precondition Required
          content:
            application/json:
              schema:
                type: object
                properties:
                  reservedSeats:
                    type: array
                    items:
                      type: integer
                  unavailableSeats:
                    type: array
                    items:
                      type: integer
                  liberatedSeats:
                    type: array
                    items:
                      type: integer
              examples:
                example:
                  value:
                    reservedSeats: []
                    liberatedSeats: []
                    unavailableSeats:
                      - 6
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
              examples:
                example-1:
                  value:
                    - 0
                    - 4
      description: "Take: an object with arrays of one or two numbers, indicating the seat position (same position as position in the seatReservations array)\n\n\nResponse:\n * 202: If seats reservation went ok.\n * 404: The specifieded run dosn't exist.\n * 428: Seats were occupied before reservating, return the unavailable seats in an array\n * 500: Error at operation.\n \n Operation:\n \n 1. Get all the reserved seats for the specific run.\n \n 2. With that data, verify if the the request seat is available.\n \n 3. Verify if the count of reserved seats by the user are less than two.\n \n 4. If all the previous are valid, add a new record to reserved seats with status isConfirmed = false.\n \n 5. The DB request to create reserved seat could return an error if the seat is allready taken, so safe reservtion is guarnteed.\n \n Previous operation\n \n 1. The system will validate if the requested seats are available.\n 2. The system will validate if the Run is on OPEN status.\n 3. The system will update the seatReservations at the specifieded run with the user ID as in JWT\n 4. If the previous is valid, the system will liberate the requested seats.\n \nDetails\n \n * In case there is not available seats, the system will return 428 with the list of unavailable seats.\n \n * In case the request body has liberateSeats as the only with data, then those seats will be liberated.\n \n * The safe reservation is acomplished by setting a multi-field key on the database, composed by: runId, userId, seat. The previous combination is set to be unique in the table.\n \n "
      requestBody:
        description: "In the example: \n1. reserve seats that ocupies the 6 and 7 position inside the array.\n2. Liberate the seat at position 6\n3. As result only the seat at position 7 is reserved"
        content:
          application/json:
            schema:
              type: object
              properties:
                reserveSeats:
                  type: array
                  items:
                    type: integer
                liberateSeats:
                  type: array
                  items:
                    type: integer
            examples:
              example:
                value:
                  reserveSeats:
                    - 6
                    - 7
                  liberateSeats:
                    - 7
      security:
        - JWT: []
      tags:
        - Reservation
        - Seats
  /reservations:
    post:
      summary: Create a new reservation
      tags:
        - Reservation
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ../common/models/reservation.v1.yaml
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
      security:
        - JWT: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                runId:
                  type: number
                endStopId:
                  type: number
                seats:
                  type: integer
                  description: The amount of reserved seats 1 or 2
                startStopId:
                  type: integer
      description: "Create a new reservation for the client.\n\nInternall function:\n\n1. Search for the user reserved seats inside the Run.\n1. Validate Run status is OPEN.\n2. Verify the amount of seats reserved equals seats in the request.\n3. Set reservation status as IN_PAYMENT\n4. Generate paymentOrder ans assign to the current reservation.\n5. The folio is made of runID+endStopID+TIMESTAMP_UNIX\n1. Set seats to be as the specified by the vehicle seatsNumeration.\n6. Save reservation.\n7. Return the reservation\n\n* The userID is provided by the JWT token. "
    parameters: []
    get:
      summary: Get all client reservations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../common/models/reservation.v1.yaml
              examples:
                example-1: {}
      description: "Return the client reservations.\n\nOperation:\n\n* The reservations will be filtered by the user who made the request, userID as given in JWT.\n* Fileter by status, possible values: \n\n  * IN_PAYMENT: Awaiting for payment\n\n  * CONFIRMED: Payment done.\n\n  * CANCELED_USER: User canceled the reservation.\n\n  * CANCELED_EXPIRED: No payment in more than 5 min.\n\n  * CANCELED_ADMIN: Some admin canceled the reservation.\n\n  * IN_PROGRESS: The passenger is in the journey.\n\n  * ENDED: The journey ended.\n\n  * ABSENT: The bus leaved without the passenger."
      parameters:
        - schema:
            type: string
            default: CONFIRMED
          in: query
          name: status
  '/reservations/{reservationID}':
    parameters:
      - schema:
          type: string
        name: reservationID
        in: path
        required: true
    get:
      summary: Get reservation
      tags:
        - Reservation
      requestBody: {}
      security:
        - JWT: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  departureDate:
                    type: string
                  aboardCode:
                    type: string
                  seats:
                    type: array
                    items:
                      type: integer
                  routeName:
                    type: string
                  driverName:
                    type: string
                  aboardStop:
                    $ref: ../common/models/stop.v1.yaml
                  descendStop:
                    $ref: ../common/models/stop.v1.yaml
                  vehicleModel:
                    type: string
                  bus:
                    $ref: ../common/models/bus.v1.yaml
                  paymentOrder:
                    $ref: ../common/models/payment-order.v1.yaml
                  reservation:
                    $ref: ../common/models/reservation.v1.yaml
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
      operationId: ''
      description: |-
        Get the detailed reservation data as required for the realted screens.

        Responses:

        200. Ok: Reservation data found.
        404. Not found: The reservation resource couldn't be found.
        500. Internal Server Error: Error

        Operation:

        1. Find the reservation data and get the 1st realted objects.

        Notes: NA
  '/reservations/{reservationID}/cancel':
    get:
      summary: Cancel a reservation
      tags:
        - Reservation
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: ../common/models/reservation.v1.yaml
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
      requestBody: {}
      security:
        - JWT: []
      description: |-
        Cancel a reservation

        Operation:

        * Validate that the resource exists.
        * Validate if the reservation belongs to the user.
        * Validate if the reservation is on CONFIRMED status.
        * Validate if the reservation is on reimbursement time: reimburse the amount from the paymentOrder as Tiim credits.
        * Set status as CANCELED_USER.
        * Return the reservation.
    parameters:
      - schema:
          type: string
        name: reservationID
        in: path
        required: true
  /journey/trajectory:
    get:
      summary: Get the time and price of a trajectory
      tags:
        - Trajectory
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../common/models/trajectory.v1.yaml
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
      requestBody: {}
      description: |-
        Get the time and price of a trajectory given a starting stop and a final stop from the same route.
        The returning element is an on object.
        In case of unexistent stop or if the stops don't belong to the same route and an error will be returned.
      parameters:
        - schema:
            type: integer
          in: query
          name: originStopId
          required: true
        - schema:
            type: integer
          in: query
          name: destinationStopId
          required: true
  /operation-areas/:
    get:
      summary: Get the list of all operation areas
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../common/models/operation-area.v1.yaml
      security:
        - JWT: []
    parameters: []
  '/operation-areas/{areaID}':
    parameters:
      - type: string
        name: areaID
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Get the specified area
      tags:
        - OperationArea
      responses: {}
      security:
        - JWT: []
  '/runs/{runID}/seats':
    parameters:
      - type: string
        name: runID
        in: path
        required: true
    get:
      summary: Get the list of seats
      tags:
        - Run
        - Reservation
        - Seats
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  seatsReservations:
                    type: array
                    items:
                      type: string
                  seatRows:
                    type: integer
                required:
                  - seatsReservations
                  - seatRows
              examples:
                example:
                  value:
                    seatsReservations:
                      - 124KJi87640ER45
                      - '0'
                      - '0'
                      - '0'
                      - '0'
                      - x
                      - '0'
                      - '0'
                      - '0'
                      - x
                      - '0'
                      - '0'
                      - x
                      - x
                      - '0'
                      - '0'
                      - '0'
                      - x
                      - x
                      - x
                    seatCols: 4
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
      description: "Retuns an array of strings. \n\nZero is an empty seat, x represent an emty space inside the bus (Not a seat), any different string is an occupied seat represented by the user Id. You need the cols field to convert the array into a NxM matrix"
      requestBody: {}
      security:
        - JWT: []
  /payments/cards:
    post:
      summary: Associate an open pay card to the client
      tags:
        - Card
        - Payment
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../common/models/card.v1.yaml
      operationId: post-payments-card
      security:
        - JWT: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                openPayCard:
                  type: object
          application/xml:
            schema:
              type: object
              properties:
                openPayResponse:
                  type: object
        description: ''
      description: "Associate a tokenized OpenPay card to the client\n\nOperation\n\n  * Passenger app save a new card at OpenPay and get an OpenPay Card object.\n  * Associte the OpenPay Card with the current user.\n  * Confirm that the OpenPay card exists and belongs to the current user (Use the open_pay_customer_id). \n  * Create a new card Object with the body data.\n  * If there is no previously opeen pay card associated, set the card as favorite."
    parameters: []
    get:
      summary: Get the client list of cards - payment methods
      operationId: get-payments-cards
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../common/models/card.v1.yaml
      security:
        - JWT: []
      description: |-
        Get the client list of cards

        Operation:

        * Return a list of cards associated to the user.
        * The User ID is obtained by JWT.
        * The list should never be empty, the client has an initial TiiM credits card created at clients setup.
  /users/init:
    post:
      summary: Start the internal setup configuration for a new user
      tags:
        - User
      responses: {}
      operationId: post-users-init
      description: |-
        Start the internal setup configuration for a new user.
        It works like a webhook, after a new user is registered in FireBase this endpoint should be invoked with the new user ID (The one from FireBase)

        Operation:

        * Register the user as OpenPay Customer and store it in FireBase customer extended table.
        * Create a new TiiM credits card for the user.
        * Others
    get:
      summary: ''
      operationId: get-users-init
      responses:
        '200':
          description: OK
      description: |-
        Start the internal setup configuration for a new user.
        It works like a webhook, after a new user is registered in FireBase this endpoint should be invoked with the new user ID (The one from FireBase)

        Operation:

        * Register the user as OpenPay Customer and store it in FireBase customer extended table.
        * Create a new TiiM credits card for the user.
        * Others

        Ref:

        https://firebase.google.com/docs/reference/functions/providers_auth_.userbuilder#on-create
      security:
        - JWT: []
  '/payments/cards/{cardID}':
    parameters:
      - type: string
        name: cardID
        in: path
        required: true
    delete:
      summary: Delete the specified card
      tags:
        - Card
        - Payment
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
                    description: DELETED
                required:
                  - response
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
      operationId: 'delete-payments-cards-{cardID}'
      description: |
        Delete the specified card

        Operation:

        * Validate that the resource exists.
        * Validate that the card belongs to the user.
        * Delete the card from OpenPay **
        * Delete from DB
      security:
        - JWT: []
      requestBody: {}
  '/payments/cards/{cardId}/favorite':
    parameters:
      - type: string
        name: cardId
        in: path
        required: true
    patch:
      summary: Set card as favorite
      tags:
        - Payment
        - Card
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: ../common/models/card.v1.yaml
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
      operationId: 'patch-payments-cards-{cardId}-favorite'
      security:
        - JWT: []
      description: |-
        Set card as favorite

        Operation:

        * Validate that the resource exists.
        * Validate that the card belongs to the user.
        * Find the previously favorite card an set to false. (There should always exists a favorite card, otherwise throw an error)
        * Set the current card as favorite.
  '/payments/validate-promo-code/{code}':
    get:
      summary: Validates if promocode is valid and ready to use
      tags:
        - Payment
        - Promocode
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  isValid:
                    type: boolean
                required:
                  - isValid
      operationId: get-payments-validate-promo-code
      description: "Validates if promocode is valid and ready to use.\n\nOperation: \n\n* Find the promocode inside the promocode table.\n* If active return true."
      security:
        - JWT: []
    parameters:
      - schema:
          type: string
        name: code
        in: path
        required: true
  'operation-areas/{operationArea}/routes':
    get:
      summary: 'Get a list of routes data for the view, filter by operation area'
      tags:
        - Route
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  startStop:
                    $ref: ../common/models/stop.v1.yaml
                  endStop:
                    $ref: ../common/models/stop.v1.yaml
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
      operationId: get-journey-routes
      description: "Get a list of routes for the view, filter by operation area.\n\nOperation \n\n* Use the operationArea param to filter the routes.\n"
      security:
        - JWT: []
      parameters:
        - schema:
            type: string
          in: query
    parameters:
      - schema:
          type: integer
        name: operationArea
        in: path
        required: true
  '/journey/origins/{descendStopId}':
    parameters:
      - schema:
          type: string
        name: descendStopId
        in: path
        required: true
    get:
      summary: Get all possible aboard stops given a descend stop (The inverse of destinations)
      tags:
        - Journey
        - Stop
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../common/models/stop.v1.yaml
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
      operationId: 'get-journey-origins-{stopId}'
      security:
        - JWT: []
      description: |+
        Get all posible aboard stops given a descend stop (The inverse of destinations)

        The same descend stop (same coordinates) could live in other routes, therfore we need all the other stops that live in other routes an then get all the origins

        Operation:

        * Get the stops that have the same coordinates that the descend stop and are of type DESCEND
        * For each stop obtain the prev stops in the route, the stops need to be of type ABOARD or BOTH.


  /journey/calculate:
    get:
      summary: 'Get the possible routes for the view, given the ascend and descend stops.'
      tags:
        - Journey
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    routeName:
                      type: string
                    ascendStop:
                      $ref: ../common/models/stop.v1.yaml
                    descendStop:
                      $ref: ../common/models/stop.v1.yaml
                    trajectory:
                      $ref: ../common/models/trajectory.v1.yaml
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
      operationId: get-journey-calculate
      description: "Get the possible routes for the view, given the ascend and descend stops.\n\nOperation: \n\n* Init an Array with [{aboardStop: Stop.findByPk(ascendStopId), descendStop: Stop.findByPk(descendStopId)}]\n* Inside Stops table, search for all stops of type ABOARD which coordinates are the same as the aboardStop.\n* If search result > 1 then:\n* Search all stops of type DESCEND which coordinates are the same as the descendStop.\n* If descend search result > 1 then:\n* Make pairs of {aboardStop, descendStop} that belongs to the same route. (Iterate over the ascending results and find in the descend results the stops that have the same route id)\n* End IF\n* End IF\n* For each coincidence:  Get the route and the trajectory that matchs the stops pair.\n"
      security:
        - JWT: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ascendStopId:
                  type: integer
                descendStopId:
                  type: integer
  /bill-profile:
    get:
      summary: Get the users bill profile
      tags:
        - Bill
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../common/models/invoice-profile.v1.yaml
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
      operationId: get-bill-profile
      description: "Get the users bill profile.\n\nResponse:\n * 200: If the user has a bill profile.\n * 404: If the user dosn't have a bill profile.\n \n Operation:\n \n 1. Get the user ID from the JWT data.\n \n 2. Search the record that matches the user ID inside Invoice Profile table.\n \n 3. Get the Bill profile asociated from the GET \"Facturacion\"/perfiles/{idPerfil} and return the full response.\n \nDetails:\n \n * The bill profile core data lives an other DB and API.\n \n "
      security:
        - JWT: []
    post:
      summary: Create a new profile for the user
      tags:
        - Bill
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ../common/models/invoice-profile.v1.yaml
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
      operationId: post-bill-profile
      description: "Create a new profile for the user who made te request.\n\nResponse:\n * 201: Created.\n * 406: Not Acceptable. If the user already has a profile.\n * 500: Error. If the resource couldn't be created.\n \n Operation:\n \n 1. Get the user ID from the JWT data.\n \n 2. Delete iIdPerfilFacturacion field if is set.\n \n 3. Make a request to POST \"Facturacion\"/perfiles/ with the data and get the response.\n \n \n \n \n Details:\n \n * The core data is created by making a request to an external API.\n * A new profile is set to isAutoBillEnable = true by default.\n \n "
      security:
        - JWT: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../common/models/bill-profile-external.v1.yaml
    parameters: []
    patch:
      summary: Update bill profile
      tags:
        - Bill
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: ../common/models/invoice-profile.v1.yaml
        '406':
          description: Not Acceptable
        '500':
          description: Internal Server Error
      operationId: patch-bill-profile
      description: |-
        Update bill profile

        Responses:

        202. Accepted: Profile succesfully changed.
        406. Not acceptable: The user dosn't have a profile or the body isn't right.
        500. Error: Unexpected error.

        Operation:

         1. Get the users id.
         2. Find if is there a bill profile acciated to the user id.
         3. Delete from body if it is set: iIdPerfilFacturacion.
         4. Re send the data to the externall endpoint.
         5. Validate the success response.
         6. Return the bill profile object wraped by the invoice profile object.

        Notes:

        * Requires a call to an externall API.
      security:
        - JWT: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: ../common/models/bill-profile-external.v1.yaml
  /operation-areas/inside-area:
    get:
      summary: Return the operation area given coordinates.
      tags:
        - OperationArea
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../common/models/operation-area.v1.yaml
        '204':
          description: No Content
          content:
            application/json:
              schema:
                type: object
                properties: {}
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
      operationId: get-operation-areas-inside-area
      description: "Return the operation area given a coordinates point.\n\nResponses: \n\n* 200 OK: Operation area found.\n* 204 No Content: No operation area found.\n* 500 ERROR: If something went wrong.\n\nOperation:\n\n* Find in the list of stops using haversine service. Filter the request by maxRadious of 50km.\n* From the first element in the response, get the route, from the route get the operation area.\n* If no response return empty object and with a 204 response code."
      security:
        - JWT: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
      parameters:
        - schema:
            type: number
          in: query
          name: lat
          required: true
        - schema:
            type: number
          in: query
          name: long
          required: true
  '/reservations/{reservationID}/rate':
    parameters:
      - type: string
        name: reservationID
        in: path
        required: true
    patch:
      summary: Rate an ended reservation
      tags:
        - Reservation
        - Rate
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../common/models/rate.v1.yaml
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
        '406':
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
      operationId: 'patch-reservations-{reservationID}-rate'
      description: "User rate the related service.\n\nResponses: \n\n* 202: Accepted. If rating the service was accepted.\n* 404: Not Found. If the reservation resource coudn't be found.\n* 406: Not Acceptable. If the user tries to rate an already rated reservation or the reservation has a different status than ENDED.\n* 500: Internal Server Error. If something went wrong.\n\nOperation:\n\n1. Find the reservation and validate that it belongs to the user.\n2. Validate that the reservation it's on ENDED status.\n3. Validate that the user don't have an entry for the reservation inside Rate table.\n4. If all is valid, create a new Rate realted to the user and to the reservation.\n\nNotes:\n\n* The user can rate a reservation only once and the reservation must be on ENDED status in order to be rated.\n* The rate value is a range between 0 and 5."
      security:
        - JWT: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                rate:
                  type: integer
                  minimum: 0
                  maximum: 5
                  description: integer from 0 to 5
              required:
                - rate
  /bill-profile/update-auto-bill:
    patch:
      summary: Update auto billing status
      tags:
        - Bill
      responses: {}
      operationId: patch-bill-profile-update-auto-bill
components:
  schemas: {}
  securitySchemes:
    JWT:
      type: http
      scheme: Bearer
