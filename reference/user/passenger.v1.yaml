openapi: 3.0.0
info:
  title: User API
  version: '1.0'
  contact:
    name: Santiago
    email: jsantiagovl@hotmail.com
  description: TiiM User API for Android and iOS apps
servers:
  - url: 'http://localhost:3000'
paths:
  /user:
    post:
      summary: Register new user
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firebaseUserId:
                  type: string
                type:
                  type: string
                  enum:
                    - USER
                    - DRIVER
                    - ADMIN
              required:
                - firebaseUserId
                - type
      responses:
        '201':
          description: Created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
      security:
        - JWT: []
      description: Register in the ser server the new firebase user. If repeated return ok
  '/user/{userID}':
    get:
      summary: Get user data
      responses:
        '200':
          description: OK
      description: Get the user local data plus Firebase pulic profile data
      tags:
        - User
      security:
        - JWT: []
    parameters:
      - schema:
          type: string
        name: userID
        in: path
        required: true
  /routes:
    get:
      summary: Get all routes
      tags:
        - Route
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../common/models/routes.v1.yaml
      description: Get all routes
      security:
        - JWT: []
      parameters:
        - schema:
            type: integer
            default: '1'
          in: query
          name: operationAreaId
  '/routes/{routeID}':
    parameters:
      - type: string
        name: routeID
        in: path
        required: true
    get:
      summary: Get specific route
      tags:
        - Route
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  route:
                    $ref: ../common/models/routes.v1.yaml
                  stops:
                    type: array
                    items:
                      $ref: ../common/models/stop.v1.yaml
                required:
                  - route
                  - stops
      requestBody: {}
      security:
        - JWT: []
  /stops:
    get:
      summary: Get all stops as specified by the optional filters
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../common/models/stop.v1.yaml
      security:
        - JWT: []
      tags:
        - Stop
      parameters:
        - schema:
            type: integer
            default: '1'
          in: query
          name: operationAreaId
        - schema:
            type: integer
          in: query
          name: routeId
        - schema:
            type: string
            enum:
              - ABOARD
              - DESCEND
              - BOTH
          in: query
          name: stopType
        - schema:
            type: string
          in: query
          name: keyword
      description: "Functionallity:\n* Get the stops as specified with the filters.\n* The filters have an additive AND behaviour.\n* All the filters are optional.\n* Filter by stopType, possible values: ABOARD, DESCEND, BOTH. \nIf ABOARD is selected then system will search by ABOARD type and BOTH type, in order to return all posible aboard stops. Same for descend."
  '/stops/{stopID}':
    parameters:
      - type: string
        name: stopID
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Get specific stop
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../common/models/stop.v1.yaml
      description: ''
      security:
        - JWT: []
      requestBody: {}
      tags:
        - Stop
  /journey/calculate:
    get:
      summary: Get journey data given two stops
      tags:
        - Journey
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  time:
                    type: string
                  price:
                    type: string
                  stops:
                    type: array
                    items:
                      $ref: ../common/models/stop.v1.yaml
                  seatsAvailable:
                    type: number
                  amenities:
                    type: array
                    items:
                      $ref: ../common/models/amenity.v1.yaml
      security:
        - JWT: []
      requestBody: {}
      parameters:
        - schema:
            type: integer
          in: query
          name: runId
          required: true
        - schema:
            type: integer
          in: query
          name: endingStop
          required: true
      description: Calculate a Journey given a Run and a starting Stop.
  '/journey/destinations/{originStopID}':
    get:
      summary: Get all posible destinatios stops given an origin
      tags:
        - Journey
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../common/models/stop.v1.yaml
      security:
        - JWT: []
    parameters:
      - schema:
          type: string
        name: originStopID
        in: path
        required: true
  /journey/origins:
    get:
      summary: Get neraby ascending stops given coordinates (magic algorithm)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../common/models/stop.v1.yaml
      parameters:
        - schema:
            type: string
          in: query
          name: lat
          required: true
        - schema:
            type: string
          in: query
          name: long
          required: true
        - schema:
            type: number
          in: query
          name: radious
      tags:
        - Journey
      description: ''
    parameters: []
  '/runs/by-stop/{stopID}':
    get:
      summary: Get runs given an ascendig stop
      tags:
        - Run
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    run:
                      $ref: ../common/models/run.v1.yaml
                    amenities:
                      type: array
                      items:
                        $ref: ../common/models/amenity.v1.yaml
      security:
        - JWT: []
      parameters:
        - schema:
            type: integer
            default: '30'
          in: query
          name: days
          description: 30 days by default
        - schema:
            type: string
          in: query
          name: date
          description: 'Get runs from a specific day. If date is set, days query is discarded'
      description: Return an array of Runs given a ascendig stop.
    parameters:
      - schema:
          type: integer
        name: stopID
        in: path
        required: true
  '/runs/{ID}':
    get:
      summary: Get an specific run
      tags:
        - Run
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../common/models/run.v1.yaml
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
      security:
        - JWT: []
    parameters:
      - schema:
          type: integer
        name: ID
        in: path
        required: true
  '/runs/{runID}/reserve-seats':
    parameters:
      - type: string
        name: runID
        in: path
        required: true
        schema:
          type: integer
    patch:
      summary: Reserve seats and verfy availability
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                type: object
                properties:
                  reservedSeats:
                    type: array
                    items:
                      type: integer
                  unavailableSeats:
                    type: array
                    items:
                      type: integer
              examples:
                example:
                  value:
                    reservedSeats:
                      - 6
                    liberatedSeats:
                      - 7
                    unavailableSeats: []
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
        '428':
          description: Precondition Required
          content:
            application/json:
              schema:
                type: object
                properties:
                  reservedSeats:
                    type: array
                    items:
                      type: integer
                  unavailableSeats:
                    type: array
                    items:
                      type: integer
                  liberatedSeats:
                    type: array
                    items:
                      type: integer
              examples:
                example:
                  value:
                    reservedSeats:
                      - 6
                      - 7
                    liberatedSeats:
                      - 7
                    unavailableSeats:
                      - 6
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
              examples:
                example-1:
                  value:
                    - 0
                    - 4
      description: "Take: an object with arrays of one or two numbers, indicating the seat position (same position as position in the seatReservations array)\n\n\nResponse:\n * 202: If seats reservation went ok.\n * 404: The specifieded run dosn't exist.\n * 428: Seats were occupied before reservating, return the unavailable seats in an array\n * 500: Error at operation.\n \n Operation:\n \n 1. The system will validate if the requested seats are available.\n 2. The system will validate if the Run is on OPEN status.\n 2. The system will update the seatReservations at the specifieded run with the user ID as in JWT\n 2. If the previous is valid, the system will liberate the requested seats.\n \n * In case there is not available seats, the system will return 428 with the list of unavailable seats.\n "
      requestBody:
        description: "In the example: \n1. reserve seats that ocupies the 6 and 7 position inside the array.\n2. Liberate the seat at position 6\n3. As result only the seat at position 7 is reserved"
        content:
          application/json:
            schema:
              type: object
              properties:
                reserveSeats:
                  type: array
                  items:
                    type: integer
                liberateSeats:
                  type: array
                  items:
                    type: integer
            examples:
              example:
                value:
                  reserveSeats:
                    - 6
                    - 7
                  liberateSeats:
                    - 7
      security:
        - JWT: []
      tags:
        - Reservation
        - Seats
  /reservations:
    post:
      summary: Create a new reservation
      tags:
        - Reservation
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: ../common/models/reservation.v1.yaml
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
      security:
        - JWT: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                runId:
                  type: number
                endStopId:
                  type: number
                seats:
                  type: integer
                  description: The amount of reserved seats 1 or 2
                startStopId:
                  type: integer
      description: "Create a new reservation for the client.\n\nInternall function:\n\n1. Search for the user reserved seats inside the Run.\n2. Verify the amount of setas reserved equals seats in the request.\n3. Set reservation status as IN_PAYMENT\n4. Generate paymentOrder ans assign to the current reservation.\n5. The folio is made of runID+endStopID+TIMESTAMP_UNIX\n6. Save reservation\n7. Return the reservation\n\n* The userID is provided by the JWT token. "
    parameters: []
    get:
      summary: Get all client reservations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../common/models/reservation.v1.yaml
              examples:
                example-1: {}
      description: "Return the client reservations.\n\nOperation:\n\n* The reservations will be filtered by the user who made the request, userID as given in JWT.\n* Fileter by status, possible values: \n\n  * IN_PAYMENT: Awaiting for payment\n\n  * CONFIRMED: Payment done.\n\n  * CANCELED_USER: User canceled the reservation.\n\n  * CANCELED_EXPIRED: No payment in more than 5 min.\n\n  * CANCELED_ADMIN: Some admin canceled the reservation.\n\n  * IN_PROGRESS: The passenger is in the journey.\n\n  * ENDED: The journey ended.\n\n  * ABSENT: The bus leaved without the passenger."
      parameters:
        - schema:
            type: string
            default: CONFIRMED
          in: query
          name: status
  '/reservations/{ID}':
    parameters:
      - type: string
        name: ID
        in: path
        required: true
    get:
      summary: Get reservation
      tags:
        - Reservation
      requestBody: {}
      security:
        - JWT: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  reservation:
                    $ref: ../common/models/reservation.v1.yaml
                  departureDate:
                    type: string
                  paymentAmount:
                    type: number
                  routeName:
                    type: string
                  vehicle:
                    $ref: ../common/models/vehicle-model.v1.yaml
                  driverName:
                    type: string
  '/reservations/{ID}/cancel':
    get:
      summary: Cancel a reservation
      tags:
        - Reservation
      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                type: boolean
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
      requestBody: {}
      security:
        - JWT: []
      description: ''
    parameters:
      - schema:
          type: string
        name: ID
        in: path
        required: true
  /journey/trajectory:
    get:
      summary: Get the time and price of a trajectory
      tags:
        - Trajectory
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../common/models/trajectory.v1.yaml
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                originStopId:
                  type: integer
                destinationStopId:
                  type: integer
      description: |-
        Get the time and price of a trajectory given a starting stop and a final stop from the same route.
        The returning element is an on object.
        In case of unexistent stop or if the stops don't belong to the same route and an error will be returned.
  /operation-areas/:
    get:
      summary: Get the list of all operation areas
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ../common/models/operation-area.v1.yaml
      security:
        - JWT: []
    parameters: []
  /operation-areas/inside-area/:
    get:
      parameters:
        - schema:
            type: number
          in: query
          name: lat
          required: true
        - schema:
            type: number
          in: query
          name: long
          required: true
      summary: Get the area where the coordinates belong
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ../common/models/operation-area.v1.yaml
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
      description: ''
    parameters: []
  '/operation-areas/{areaID}':
    parameters:
      - type: string
        name: areaID
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Get the specified area
      tags:
        - OperationArea
      responses: {}
  '/runs/{runID}/seats':
    parameters:
      - type: string
        name: runID
        in: path
        required: true
    get:
      summary: 'Get the list of seats '
      tags:
        - Run
        - Reservation
        - Seats
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  seatsReservations:
                    type: array
                    items:
                      type: string
                  seatCols:
                    type: integer
                required:
                  - seatsReservations
                  - seatCols
              examples:
                example:
                  value:
                    seatsReservations:
                      - 124KJi87640ER45
                      - '0'
                      - '0'
                      - '0'
                      - '0'
                      - x
                      - '0'
                      - '0'
                      - '0'
                      - x
                      - '0'
                      - '0'
                      - x
                      - x
                      - '0'
                      - '0'
                      - '0'
                      - x
                      - x
                      - x
                    seatCols: 4
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: ../common/models/error.v1.yaml
      description: "Retuns an array of strings. \n\nZero is an empty seat, x represent an emty space inside the bus (Not a seat), any different string is an occupied seat represented by the user Id. You need the cols field to convert the array into a NxM matrix"
      requestBody: {}
      security:
        - JWT: []
components:
  schemas: {}
  securitySchemes:
    JWT:
      type: http
      scheme: Bearer
